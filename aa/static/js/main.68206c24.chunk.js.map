{"version":3,"sources":["utils/setRem.js","registerServiceWorker.js","components/CommentInput.js","reducers/comments.js","containers/CommentInput.js","components/Comment.js","components/CommentList.js","containers/CommentList.js","containers/CommentApp.js","index.js"],"names":["psdw","dpr","rem","htmlDOM","document","documentElement","window","devicePixelRatio","clientWidth","style","fontSize","setAttribute","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","CommentInput","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","username","content","textarea","focus","event","onUserNameInputBlur","target","value","setState","onSubmit","createdTime","Date","_this2","_react_16_6_3_react_default","a","createElement","className","onBlur","handleUsernameBlur","bind","onChange","handleUsernameChange","ref","handleContentChange","onClick","handleSubmit","Component","defaultProps","CommentInputContainer","_loadUsername","localStorage","getItem","setItem","comment","alert","comments","newComments","toConsumableArray","concat","JSON","stringify","CommentInput_CommentInput","_saveUsername","handleSubmitComment","connect","dispatch","type","addComment","Comment","timeString","_updateTimeString","_timer","setInterval","clearInterval","duration","now","Math","round","max","replace","onDeleteComment","index","dangerouslySetInnerHTML","__html","_getProcessedContent","handleDeleteComment","CommentList","map","i","Comment_Comment","key","CommentListContainer","_loadComments","parse","initComments","slice","CommentList_CommentList","commentIndex","deleteComment","CommentApp","containers_CommentInput","containers_CommentList","FastClick","attach","body","store","createStore","action","ReactDOM","render","_react_redux_5_1_1_react_redux_es","CommentApp_CommentApp","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.68206c24.chunk.js","sourcesContent":["(function(psdw){\r\n  var dpr=0 , rem=0 , scale=0;\r\n  var htmlDOM=document.documentElement;\r\n  dpr=window.devicePixelRatio;\r\n  var currentWidth=htmlDOM.clientWidth;\r\n  scale=currentWidth/psdw;\r\n  rem=psdw/10;\r\n  rem=rem*scale;\r\n  htmlDOM.style.fontSize=rem+'px';\r\n  htmlDOM.setAttribute('data-dpr',dpr)\r\n})(750)\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\nexport default class CommentInput extends Component {\r\n  static propTypes = {\r\n    username: PropTypes.any,\r\n    onSubmit: PropTypes.func,\r\n    onUserNameInputBlur: PropTypes.func\r\n  }\r\n\r\n  static defaultProps = {\r\n    username: ''\r\n  }\r\n\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = {\r\n      username: props.username,\r\n      content: ''\r\n    }\r\n  }\r\n\r\n  componentDidMount () {\r\n    this.textarea.focus()\r\n  }\r\n\r\n  handleUsernameBlur (event) {\r\n    if (this.props.onUserNameInputBlur) {\r\n      this.props.onUserNameInputBlur(event.target.value)\r\n    }\r\n  }\r\n\r\n  handleUsernameChange (event) {\r\n    this.setState({\r\n      username: event.target.value\r\n    })\r\n  }\r\n\r\n  handleContentChange (event) {\r\n    this.setState({\r\n      content: event.target.value\r\n    })\r\n  }\r\n\r\n  handleSubmit () {\r\n    if (this.props.onSubmit) {\r\n      this.props.onSubmit({\r\n        username: this.state.username,\r\n        content: this.state.content,\r\n        createdTime: +new Date()\r\n      })\r\n    }\r\n    this.setState({ content: '' })\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div className='comment-input'>\r\n        <div className='comment-field'>\r\n          <span className='comment-field-name'>用户名：</span>\r\n          <div className='comment-field-input'>\r\n            <input\r\n              value={this.state.username}\r\n              onBlur={this.handleUsernameBlur.bind(this)}\r\n              onChange={this.handleUsernameChange.bind(this)} />\r\n          </div>\r\n        </div>\r\n        <div className='comment-field'>\r\n          <span className='comment-field-name'>评论内容：</span>\r\n          <div className='comment-field-input'>\r\n            <textarea\r\n              ref={(textarea) => this.textarea = textarea}\r\n              value={this.state.content}\r\n              onChange={this.handleContentChange.bind(this)} />\r\n          </div>\r\n        </div>\r\n        <div className='comment-field-button'>\r\n          <button\r\n            onClick={this.handleSubmit.bind(this)}>\r\n            发布\r\n          </button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","// action types\r\nconst INIT_COMMNETS = 'INIT_COMMNETS'\r\nconst ADD_COMMENT = 'ADD_COMMENT'\r\nconst DELETE_COMMENT = 'DELETE_COMMENT'\r\n\r\n// reducer\r\nexport default function (state, action) {\r\n  if (!state) {\r\n    state = { comments: [] }\r\n  }\r\n  switch (action.type) {\r\n    case INIT_COMMNETS:\r\n      // 初始化评论\r\n      return { comments: action.comments }\r\n    case ADD_COMMENT:\r\n      // 新增评论\r\n      return {\r\n        comments: [...state.comments, action.comment]\r\n      }\r\n    case DELETE_COMMENT:\r\n      // 删除评论\r\n      return {\r\n        comments: [\r\n          ...state.comments.slice(0, action.commentIndex),\r\n          ...state.comments.slice(action.commentIndex + 1)\r\n        ]\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n// action creators\r\nexport const initComments = (comments) => {\r\n  return { type: INIT_COMMNETS, comments }\r\n}\r\n\r\nexport const addComment = (comment) => {\r\n  return { type: ADD_COMMENT, comment }\r\n}\r\n\r\nexport const deleteComment = (commentIndex) => {\r\n  return { type: DELETE_COMMENT, commentIndex }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport CommentInput from '../components/CommentInput'\r\nimport { addComment } from '../reducers/comments'\r\nimport PropTypes from 'prop-types';\r\nclass CommentInputContainer extends Component {\r\n  static propTypes = {\r\n    comments: PropTypes.array,\r\n    onSubmit: PropTypes.func\r\n  }\r\n\r\n  constructor () {\r\n    super()\r\n    this.state = { username: '' }\r\n  }\r\n\r\n  componentWillMount () {\r\n    this._loadUsername()\r\n  }\r\n\r\n  _loadUsername () {\r\n    const username = localStorage.getItem('username')\r\n    if (username) {\r\n      this.setState({ username })\r\n    }\r\n  }\r\n\r\n  _saveUsername (username) {\r\n    localStorage.setItem('username', username)\r\n  }\r\n\r\n  handleSubmitComment (comment) {\r\n    if (!comment) return\r\n    if (!comment.username) return alert('请输入用户名')\r\n    if (!comment.content) return alert('请输入评论内容')\r\n    const { comments } = this.props\r\n    const newComments = [...comments, comment]\r\n    localStorage.setItem('comments', JSON.stringify(newComments))\r\n    if (this.props.onSubmit) {\r\n      this.props.onSubmit(comment)\r\n    }\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <CommentInput\r\n        username={this.state.username}\r\n        onUserNameInputBlur={this._saveUsername.bind(this)}\r\n        onSubmit={this.handleSubmitComment.bind(this)} />\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    comments: state.comments\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSubmit: (comment) => {\r\n      dispatch(addComment(comment))\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(CommentInputContainer)\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\nexport default class Comment extends Component {\r\n  static propTypes = {\r\n    comment: PropTypes.object.isRequired,\r\n    onDeleteComment: PropTypes.func,\r\n    index: PropTypes.number\r\n  }\r\n\r\n  constructor () {\r\n    super()\r\n    this.state = { timeString: '' }\r\n  }\r\n\r\n  componentWillMount () {\r\n    this._updateTimeString()\r\n    this._timer = setInterval(\r\n      this._updateTimeString.bind(this),\r\n      5000\r\n    )\r\n  }\r\n\r\n  componentWillUnmount () {\r\n    clearInterval(this._timer)\r\n  }\r\n\r\n  _updateTimeString () {\r\n    const comment = this.props.comment\r\n    const duration = (+Date.now() - comment.createdTime) / 1000\r\n    this.setState({\r\n      timeString: duration > 60\r\n        ? `${Math.round(duration / 60)} 分钟前`\r\n        : `${Math.round(Math.max(duration, 1))} 秒前`\r\n    })\r\n  }\r\n\r\n  _getProcessedContent (content) {\r\n    return content\r\n      .replace(/&/g, \"&amp;\")\r\n      .replace(/</g, \"&lt;\")\r\n      .replace(/>/g, \"&gt;\")\r\n      .replace(/\"/g, \"&quot;\")\r\n      .replace(/'/g, \"&#039;\")\r\n      .replace(/`([\\S\\s]+?)`/g, '<code>$1</code>')\r\n  }\r\n\r\n  handleDeleteComment () {\r\n    if (this.props.onDeleteComment) {\r\n      this.props.onDeleteComment(this.props.index)\r\n    }\r\n  }\r\n\r\n  render () {\r\n    const comment = this.props.comment\r\n    return (\r\n      <div className='comment'>\r\n        <div className='comment-user'>\r\n          <span className='comment-username'>\r\n            {comment.username}\r\n          </span>：\r\n        </div>\r\n        <p dangerouslySetInnerHTML={{\r\n          __html: this._getProcessedContent(comment.content)\r\n        }} />\r\n        <span className='comment-createdtime'>\r\n          {this.state.timeString}\r\n        </span>\r\n        <span\r\n          onClick={this.handleDeleteComment.bind(this)}\r\n          className='comment-delete'>\r\n          删除\r\n        </span>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport Comment from './Comment'\r\n\r\nexport default class CommentList extends Component {\r\n  static propTypes = {\r\n    comments: PropTypes.array,\r\n    onDeleteComment: PropTypes.func\r\n  }\r\n\r\n  static defaultProps = {\r\n    comments: []\r\n  }\r\n\r\n  handleDeleteComment (index) {\r\n    if (this.props.onDeleteComment) {\r\n      this.props.onDeleteComment(index)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.props.comments.map((comment, i) =>\r\n          <Comment\r\n            comment={comment}\r\n            key={i}\r\n            index={i}\r\n            onDeleteComment={this.handleDeleteComment.bind(this)} />\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux'\r\nimport CommentList from '../components/CommentList'\r\nimport { initComments, deleteComment } from '../reducers/comments'\r\n\r\nclass CommentListContainer extends Component {\r\n  static propTypes = {\r\n    comments: PropTypes.array,\r\n    initComments: PropTypes.func,\r\n    onDeleteComment: PropTypes.func\r\n  }\r\n\r\n  componentWillMount () {\r\n    this._loadComments()\r\n  }\r\n\r\n  _loadComments () {\r\n    let comments = localStorage.getItem('comments')\r\n    comments = comments ? JSON.parse(comments) : []\r\n    this.props.initComments(comments)\r\n  }\r\n\r\n  handleDeleteComment (index) {\r\n    const { comments } = this.props\r\n    const newComments = [\r\n      ...comments.slice(0, index),\r\n      ...comments.slice(index + 1)\r\n    ]\r\n    localStorage.setItem('comments', JSON.stringify(newComments))\r\n    if (this.props.onDeleteComment) {\r\n      this.props.onDeleteComment(index)\r\n    }\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <CommentList\r\n        comments={this.props.comments}\r\n        onDeleteComment={this.handleDeleteComment.bind(this)} />\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    comments: state.comments\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    initComments: (comments) => {\r\n      dispatch(initComments(comments))\r\n    },\r\n    onDeleteComment: (commentIndex) => {\r\n      dispatch(deleteComment(commentIndex))\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(CommentListContainer)\r\n","import React, { Component } from 'react'\r\nimport CommentInput from './CommentInput'\r\nimport CommentList from './CommentList'\r\n\r\nexport default class CommentApp extends Component {\r\n  render() {\r\n    return (\r\n      <div className='wrapper'>\r\n        <CommentInput />\r\n        <CommentList />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport FastClick from 'fastclick';\nimport registerServiceWorker from './registerServiceWorker';\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport CommentApp from './containers/CommentApp'\nimport commentsReducer from './reducers/comments'\nimport './utils/setRem';\nimport './index.css'\n\nFastClick.attach(document.body);\nconst store = createStore(commentsReducer)\n\nReactDOM.render(\n  <Provider store={store}>\n    <CommentApp />\n  </Provider>,\n  document.getElementById('root')\n);\nregisterServiceWorker();\n"],"sourceRoot":""}